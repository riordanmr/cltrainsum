# This program, written in the Icon programming language, parses
# (exercise) training log data from a file usually known as CLTRAINEW.
#
# CLTRAINEW was created by Paul S. Wolberg in January 1985, to track
# training done by a team preparing for the MSU
# (Michigan State University) Classic team triathlon.
# Later, the file devolved into a log for training done only by me,
# Mark Riordan.  
#
# Entries in the log are in chronological order.  Entries in the log
# changed format over time, until the format mostly settled down in mid-1988.
# This program recognizes only entries in this "new" format.
# Therefore, input to the program ought to be pre-processed to remove
# any lines prior to (typically) 1989-01-01.
#
# I thought of writing this program shortly after Fall 1986, when I ordered
# and received an Icon distribution tape (for VAX/VMS) from the University of Arizona.
# But I didn't start writing it until March 21, 2022.
# Mark Riordan  riordan@rocketmail.com 

# The input file contains lines with a date followed by zero or more
# workouts separated by semi-colons.  Comments may be included in parentheses,
# which may be nested.  Most days contain only one line, but multiple lines for
# a given date are possible, in which case subsequent lines start with a +
# in column 1.
# Each day has zero or more activities.  If there is more than one activity,
# the activities are separated by ";".  Each activity has a quantity,
# option units, and a type.  Activity types normally end with a period;
# however, this convention was not always followed in earlier years, so the
# period is optional.  Most activity types are a single character (aside from
# the trailing period).  However, there are exceptions, such as:
# ll for leg lifts
# wNN for weight lifting (bench presses) of NN pounds.  (Note that confusingly,
#    w without NN means something completely different, namely walking.)
# br for biking during a race.  This also applies to rr and sr for running and
#    swimming during a race.
# 
# Here's an example:
#   07/23  0.6 miles sr; 18.3 miles br.; 4.6 miles rr.  (Capitol City Triathlon.
#   +      Think swim may have been short. 
# In later years, I started omitting the units, due to the difficulty of entering
# text on a mobile phone.  If units are omitted, they default to a fixed unit
# based on activity type (usually miles), like this:
#   9/09 [124.8T] 13.29 b.; 2.3 w. 
#
# Body weight in pounds may be present in square brackets.  If followed by T,
# the weight was measured on Tam's old scale, which is believed to read 
# 0.8 pounds low.  In a few cases, blood pressure and pulse information are 
# included after the weight, preceded by a comma, like this: [127.5,104/66,89]
# However, I didn't record this for long, so it's probably not worth processing
# BP and pulse data.
#
# Blank lines may be present, and can be ignored.  They should occur only between
# a Saturday and a Sunday.
# The first day of every year contains the sequence (*** nnnn )
# where nnnn is the year. 
#
# Here are the activity types in CLTRAINEW.  They are case insensitive.
# Note that the activity type descriptions given at the top of the file
# are not reliable; many of these were entered early on by Paul and Glenn
# and not followed by Mark.
#
# b  - bicycling
# bi - bicycling indoors
# br - bicycling during a race
# bt - probably some type of bicycling.  I think it's been used inconsistently for
#      bicycling for transportation and bicycling on a trainer (indoors).
# c  - canoeing
# dNN - lifting dumbbells with weight NN pounds.
# i  - indoor cycling, typically on rollers or on a trainer
# ll - leg lifts
# pu - pushups
# puk - pushups on knees
# r  - running
# ri - running, probably indoors (despite cltrainew saying "intensely")
# rowing - rowing, probably on a rowing machine
# rr - running in a race
# rt - running on a treadmill 
# rw - run/walk.  But most run/walks are recorded as walks.
# s  - swimming
# sl - unknown.  Probably some calisthenics like side leg lifts.
# smN - swim machine with N pound weights.
# sr - swimming during a race.
# stairs - climbing stairs
# t  - running (or walking?) on a treadmill
# w  - walking
# wNN - bench-pressing (weight-lifting) NN pounds
# walk - walking
# walking - walking
# wi - unknown.  Probably walking of some type; only logged once on a day I also walked normally.
# wt - walking on a treadmill
#
# Here are the explicit units.  Note that often units are omitted:
# hour
# k
# meter
# meters
# mile
# miles
# min
# minutes
# yards

# Normal usage: 
#   icont cltrainparse.icn -x <../data/cltrainewrecent.txt
# Test usage:
#   icont cltrainparse.icn -x -t 

link strings

global oldyear, fileIndivActs, fileDays, tableActTypes, tableUnits
global prevYear, prevMonth, prevDay

record Activity(atype, aunits, aquantity)

record CDate(ayear, amonth, aday)

procedure ltrim(txt)
    while txt[1] == " " do {
        txt[1] := ""
    }
    return txt
end

# From http://www2.cs.arizona.edu/icon/ftp/newsgrp/group96a.txt
procedure join(stringList,separator)
  local result
  result := get(stringList)
  every result ||:= separator || !stringList
  return result
end

procedure split(string,separator)
  local result
  string ? {
    until pos(0) do {
      result := tab(find(separator) | 0)
      suspend result
      move(*separator)
    }
  }
end

procedure stripTrailing(str, trailChar)
    if *str > 0 then {
        if str[-1] == trailChar then {
            str := str[1:*str]
        }
    }
    return str
end

# Remove comments from input.  As with PostScript, comments 
# start with ( and end with ).  Comments may be embedded in other comments.
# Returns the decommented version of the string.
# Credit: https://www2.cs.arizona.edu/~collberg/Teaching/372/2005/Html/Html-34/
procedure decomment(S);
   while (1) do {
      if f := find("(",S) &
         t := find(")",S,f+1) &
         not (find("(",S,f+1) < t) &
         not (find(")",S,f+1) < t) then 
         S[f:t+1] := ""
      else
         break
   }
   return S;
end

procedure mapActivityType(activityType)
    static tableActToStdAct
    initial {
        tableActToStdAct := table()
        tableActToStdAct["b"] := "b"
        tableActToStdAct["bi"] := "b"
        tableActToStdAct["br"] := "b"
        tableActToStdAct["bt"] := "b"
        tableActToStdAct["bicycling"] := "b"
        tableActToStdAct["c"] := "c"
        tableActToStdAct["i"] := "b"
        tableActToStdAct["ll"] := ""
        tableActToStdAct["pu"] := ""
        tableActToStdAct["puk"] := ""
        tableActToStdAct["r"] := "r"
        tableActToStdAct["ri"] := "r"
        tableActToStdAct["rowing"] := ""
        tableActToStdAct["rr"] := "r"
        tableActToStdAct["rt"] := "r"
        tableActToStdAct["rw"] := "w"
        tableActToStdAct["s"] := "s"
        tableActToStdAct["sl"] := ""
        tableActToStdAct["sr"] := "s"
        tableActToStdAct["stairs"] := ""
        tableActToStdAct["t"] := "r"
        tableActToStdAct["w"] := "w"
        tableActToStdAct["walk"] := "w"
        tableActToStdAct["walking"] := "w"
        tableActToStdAct["wi"] := "w"
        tableActToStdAct["wt"] := "w"
    }
    mappedAct := activityType
    if \tableActToStdAct[activityType] then {
        mappedAct := tableActToStdAct[activityType]
    }
    return mappedAct
end

# Given an activity type, units, and quantity, return a possibly
# modified quantity in the standard units for that activity.
procedure mapQuantity(activityType, units, quantity)
    if activityType == "r" then {
        if units == "" | units == "miles" | units == "mile" then {
        } else if units == "k" then {
            quantity *:= 0.621371
        } else if units == "min" | units == "minutes" then {
            quantity *:= 0.125
        } else {
            write("!! bad units for activityType=",activityType," units=", units, " quantity=",quantity)
        }
        units := "miles"
    } else if activityType == "s" then {
        if units == "" | units == "miles" | units == "mile" then {
        } else if units == "yards" then {
            quantity /:= 1760.0
        } else if units == "meters" | units == "meter" then {
            quantity /:= 1609.0
        } else if units == "k" then {
            quantity *:= 0.621371
        } else if units == "min" | units == "minutes" then {
            # Not sure how fast I used to swim.
            quantity *:= (1.0/25.0)
        } else {
            write("!! bad units for activityType=",activityType," units=", units, " quantity=",quantity)
        }
        units := "miles"
    } else if activityType == "b" then {
        if units == "" | units == "miles"| units == "mile" then {
        } else if units == "min" | units == "minutes" then {
            # Convert from minutes to miles.
            quantity := (quantity / 60.0) * 9.0
        } else if units == "hour" | units == "hours" then {
            # Convert from hours to miles.
            quantity := quantity * 9.0
        } else if units == "k" then {
            quantity *:= 0.621371
        } else {
            write("!! bad units for activityType=",activityType," units=", units, " quantity=",quantity)
        }
        units := "miles"
    }
    return Activity(activityType, units, quantity)
end

# Given a raw individual activity, parse and return its components.
# Exit: Returns an Activity record.  This is for activity "" if there was
#       no actual activity.
procedure procActivity(adate,activity,iline)
    activity := ltrim(trim(activity))
    if activity == "" then {
        return Activity("","",0)
    }
    #write("date: '", adate, "' activity: '", activity,"'")
    # Crack off the leading quantity.
    if activity ? { quant := tab(many('0123456789.')) & rem := tab(many(&ascii)) } then {
        #write("  quant='", quant,"' rem='", rem, "'")
    } else {
        write("!! On line ", iline, " failed to parse ", activity)
        fail
    }

    rem := ltrim(rem)
    units := ""
    activityType := ""
    if rem ? { units:= tab(many(&ascii -- ' '))} then {
        activityType := ltrim(trim(rem[1+*units:0]))
        if *activityType == 0 then {
            activityType := units
            units := ""
        }
    }
    # Strip trailing period.
    activityType := stripTrailing(activityType, ".")
    units := stripTrailing(units, ".")
    # Fold to lowercase.
    activityType := map(activityType,&ucase,&lcase)
    # Map similar activity codes to the standard activity code for that activity.
    activityType := mapActivityType(activityType)
    # Convert the quantity to the standard units (typically miles) for that activity type.
    modActivity := mapQuantity(activityType, units, quant)

    # Increment the number of times this activity has been performed.
    tableActTypes[modActivity.atype] +:= 1
    tableUnits[modActivity.aunits] +:= 1

    # Write a line in the CSV file that contains one line per activity.
    write(fileIndivActs,adate,",",modActivity.aquantity,",",modActivity.aunits,",",modActivity.atype)

    return modActivity
end

# Parse weight info and return the adjusted weight in pounds.
# Entry:    inbrack is text in brackets.  It can have these forms:
#                   126.5       weight in pounds
#                   126.6,103/67,67     weight in pounds, BP, pulse
#                   127.6,113/66,80 ae  same, but after eating breakfast
#                   126.6T      weight in pounds minus 0.8 pounds.  T means
#                               Tam's scale, which reads 0.8 pounds low.
# Exit:     Returns the weight in pounds, or 0 if there was none.
procedure parseWeight(inbrack)
    weight := 0
    if inbrack ? {extweight := tab(many('0123456789.')) } then {
        weight := extweight
        if *inbrack > *extweight then {
            inbrack ? { move(*inbrack - 1); remaining := tab(many(&ascii)) }
            #write("parseWeight inbrack=", inbrack, " extweight=", extweight, " remaining='", remaining, "'")
            # We have a weight.  Is it followed by "T"?
            if remaining ? "T" then {
                weight := weight + 0.8
            }
        }
    }
    return weight
end

# Proceess the data for an entire day.  The input has been partially parsed.
procedure procParsedDay(adate, inbrack, activities, iline)
    weight := parseWeight(inbrack)
    if weight ~= 0 then {
        if weight > 100 & weight < 140 then {
        } else {
            write("!! invalid weight on line ",iline,": ", weight, " inbrack=", inbrack)
        }
    }
    tblActivitiesForOneDay := table(0)
    every act:= procActivity(adate,split(activities,";"), iline) do {
        if \act.atype & act.atype ~== "" then {
            tblActivitiesForOneDay[act.atype] := act.aquantity
        }
    }
    # Write a line to a CSV file with certain specific activities.
    write(fileDays, adate,",", 
        weight,",",
        tblActivitiesForOneDay["w"],",", 
        tblActivitiesForOneDay["r"], ",", 
        tblActivitiesForOneDay["b"], ",", 
        tblActivitiesForOneDay["s"])
end

# Parse the incoming date into year, month, day
# Entry:    adate is of the form YYYY-MM-DD
# Exit:     Returns a CDate object with the year, month, day.
#           They are set to 0 if the parsing failed.
procedure parseDate(adate)
    year := 0
    month := 0
    day := 0
    adate ? { year := tab(many(&digits)) & tab(match("-")) & month := tab(many(&digits)) &
        tab(match("-")) & day := tab(many(&digits)) }
    return CDate(0+year, 0+month, 0+day)
end

# Given a date (year, month, day), return the next date.
# Exit: Returns a CDate object.
procedure nextDate(ayear, amonth, aday)
    static listDaysInMonth
    initial {
        listDaysInMonth := [31,28,31,30,31,30,31,31,30,31,30,31]
    }
    aday +:= 1
    days_in_month := listDaysInMonth[amonth]
    if amonth = 2 then {
        if ayear%4 = 0 then {
            # !/mrr This test will not properly detect all leapyears.
            days_in_month +:= 1
        }
    }
    if aday > days_in_month then {
        aday := 1
        amonth +:= 1
        if amonth > 12 then {
            ayear +:= 1
            amonth := 1
            aday := 1
        }
    }
    return CDate(ayear, amonth, aday)
end

# Process the data for an entire day.
# Entry:    line is the raw lines for one day, except that any continuation lines
#               have been collapsed into one line.
#           iline is the line number, for debugging purposes.
procedure procRawDay(line, iline) 
    #write("proc1line line ", iline, " oldyear=", oldyear, ": ", line)
    static myPrevDate
    initial {
        myPrevDate := CDate(666,666,666)
    }
    year := oldyear

    # Look for text like:   *** 2001   and if present, extract the year from it.
    line ? { if tab(find("*** ")) then { move(4); year := 0+tab(many('0123456789')); }};
    if year ~= oldyear then {
        if oldyear ~= 0 then {
            if year ~= (oldyear+1) then {
                write("** Error: year is ", year, " prev year was ", oldyear)
            }
        }
        oldyear := year
    }

    # Remove comments, which are PostScript-style (text surrounded by parentheses).
    line := decomment(line)
    line := trim(line)

    if *line > 0 then {
        lineGood := 1
        if not many(&digits,line) then {
            write("** No leading date on line ", iline, " ", line)
            lineGood := 0
        } else if line[3] == "/" then {
            line[3] := "-"
            line := year || "-" || line
            #write(line)
            if *line < 10 then {
                write("** Line ", iline, " too short: ", line)
                lineGood := 0
            }            
        } else {
            write("** Missing / in date on line ", iline, " ", line)
            lineGood := 0
        }
        
        if lineGood == 1 then {
            # 1971-08-10  26.4 miles b.
            # 123456789a1

            # Strip off the leading date.
            adate := line[1:11]

            # Check that this is the next day.
            thisDate := parseDate(adate)
            if myPrevDate.ayear ~= 666 then {
                myNextDate := nextDate(myPrevDate.ayear, myPrevDate.amonth, myPrevDate.aday)
                if thisDate.ayear = myNextDate.ayear & thisDate.amonth = myNextDate.amonth &
                    thisDate.aday = myNextDate.aday then {
                    # Yes, this is the next day, as expected.
                } else {
                    write("!! on line ", iline, " date ", adate, " is wrong; expected ", myNextDate.ayear, ",", myNextDate.amonth, ",", myNextDate.aday)
                }
            }
            myPrevDate := thisDate

            rem := ""
            if *line > 10 then {
                rem := ltrim(line[11:1+*line])
            }

            # Extract the info in [].  This will be weight data,
            # plus occasionally other information like blood pressure.
            # Note that older records had this at the end, like this:
            # 09/16  13.96 miles b.; 1.6 miles w.  [131.5 mw.]
            # rather than the beginning, like this (starting 2006-03-05):
            # 03/05  [130.5] 6.2 miles r.; 2.7 miles w.
            inbrack := ""
            if rem ? {tab(find("[")) & move(1) & inbrack := tab(many(&ascii -- ']')) & clbr := match("]") } then {
                rem := replace(rem,"[" || inbrack || "]", "")
                #write("Matched []. inbrack='",inbrack,"' clbr=",clbr," rem='", rem, "'")
            }
            #write("date='",adate,"' inbrack='",inbrack,"' rem='",rem,"'")
            procParsedDay(adate, inbrack, rem, iline)
        }
    }

end

# Wrap up after all lines have been processed.
procedure wrapup()
    # List all (converted) activity types and how often they appeared.
    #every act := !sort(tableActTypes,2) do {
    #    write(act[1],"\t", act[2])
    #}
    
    write("")
    # List all (converted) units and how often they appeared.
    every units := !sort(tableUnits,2) do {
        write("'",units[1],"'","\t", units[2])
    }
    
end

# Process the entire input.
procedure readlines()
    fileIndivActs := open("act.csv", "w")
    fileDays := open("days.csv", "w")
    tableActTypes := table(0)
    tableUnits := table(0)
    entireline := &null
    oldyear := 0
    iline := 0

    while line := trim(read()) do {
        if *line > 0 then {
            if line[1] == "+" then {
                entireline := entireline || line[2:1+*line]
            } else {
                if \entireline then {
                    procRawDay(entireline, iline)
                }
                entireline := line
            }
        }
        iline := iline + 1;
    }
    # Handle last line.
    procRawDay(entireline, iline)
    wrapup()
end

# Fail if i is 0, else succeed.
procedure testFail(i)
    if i=0 then {
        # I don't need to fail explicitly; simply not executing "return"
        # seems to cause failure.
        #fail
    } else {
        return
    }
end

procedure test1()
    write("Welcome to test1")
    rem := "124.8T] 8.3 b."
    write("testing with: ",rem)
    inbrack := ""
    if rem ? {tab(match("[")) & inbrack := tab(many('0123456789T./')) ;  clbr := match("]") } then {
        write("Matched. inbrack=",inbrack," clbr=",clbr)
        rem2 := rem[clbr:0]
        write("rem2='",rem2,"'")
    }

    rem := "[123.8T] 8.4 b."
    write("testing with: ",rem)
    inbrack := ""
    if rem ? {tab(match("[")) & inbrack := tab(many('0123456789T./')) ;  clbr := match("]") } then {
        write("Matched. inbrack=",inbrack," clbr=",clbr)
        rem2 := rem[clbr:0]
        write("rem2='",rem2,"'")
    }

    rem := "25.18 miles b. (M400); 1.8 miles w. [130 mw.]"
    write("testing with: ",rem)
    inbrack := ""
    if rem ? {tab(find("[")) & move(1) & inbrack := tab(many(&ascii -- ']')) & clbr := match("]") } then {
        rem := replace(rem,"[" || inbrack || "]", "")
        write("Matched []. inbrack='",inbrack,"' clbr=",clbr," rem='", rem, "'")
    }

    if testFail(1) then {
        write("testFail(1) succeeded, as expected")
    } else {
        write("testFail(1) failed - Error!")
    }
    if testFail(0) then {
        write("testFail(0) succeeded - Error!")
    } else {
        write("testFail(0) failed, as expected")
    }

    # Test stripTrailing
    str := "hi"
    result := stripTrailing(str,".")
    if result == "hi" then {
        write("stripTrailing of '", str, "' succeeded")
    } else {
        write("!! stripTrailing of '", str, "' incorrectly returned '",result,"'")
    }
    str := "hi."
    result := stripTrailing(str,".")
    if result == "hi" then {
        write("stripTrailing of '", str, "' succeeded")
    } else {
        write("!! stripTrailing of '", str, "' incorrectly returned '",result,"'")
    }

    # Test parseDate
    str := "2022-04-10"
    result := parseDate(str)
    if result.ayear = 2022 & result.amonth = 4 & result.aday = 10 then {
        write("parseDate of ",str," succeeded")
    } else {
        write("!! parseDate of ",str," incorrectly returned ", result.ayear,",",result.amonth,",",result.aday)
    }

    str := "2022-0j-10"
    result := parseDate(str)
    if result.aday = 0 then {
        write("parseDate of ",str," correctly failed")
    } else {
        write("!! parseDate of ",str," incorrectly succeeded")
    }

    # Test nextDate
    myDate := parseDate("2022-04-10")
    result := nextDate(myDate.ayear, myDate.amonth, myDate.aday)
    if result.ayear = 2022 & result.amonth=4 & result.aday = 11 then {
        write("nextDate(",myDate.ayear,",", myDate.amonth, ",",myDate.aday,") succeeded")
    } else {
        write("!! nextDate(",myDate.ayear,"-",myDate.amonth,"-",myDate.aday,") incorrectly returned ",result.ayear,
            " ", result.amonth, " ", result.aday)
    }

    myDate := parseDate("2022-04-30")
    result := nextDate(myDate.ayear, myDate.amonth, myDate.aday)
    if result.ayear = 2022 & result.amonth=5 & result.aday = 1 then {
        write("nextDate(",myDate.ayear,",", myDate.amonth, ",",myDate.aday,") succeeded")
    } else {
        write("!! nextDate(",myDate.ayear,"-",myDate.amonth,"-",myDate.aday,") incorrectly returned ",result.ayear,
            " ", result.amonth, " ", result.aday)
    }

    inbrack := "126.5"
    result := parseWeight(inbrack)
    if result = 126.5 then {
        write("parseWeight(", inbrack, ") succeeded")
    } else {
        write("!! parseWeight(", inbrack, ") incorrectly returned ", result)
    }

    inbrack := ""
    result := parseWeight(inbrack)
    if result = 0 then {
        write("parseWeight(", inbrack, ") succeeded")
    } else {
        write("!! parseWeight(", inbrack, ") incorrectly returned ", result)
    }    

    inbrack := "127.8T"
    result := parseWeight(inbrack)
    if result = 128.6 then {
        write("parseWeight(", inbrack, ") succeeded")
    } else {
        write("!! parseWeight(", inbrack, ") incorrectly returned ", result)
    }

end

procedure main(args)
    # Crack the command line arguments.
    test := &null
    i := 1
    while i <= *args do {
        if args[i] == "-t" then {
            test := 1
        }
        i:=i+1
    }

    if \test then {
        test1()
    } else {
        readlines()
    }
end
