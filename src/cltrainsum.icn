# cltrainsum.icn - a program, written in the Icon programming language, 
# to summarize (exercise) training log data emitted from cltrainparse.icn.
# The ultimate source of the data is a file usually known as CLTRAINEW.
#
# The input file contains lines like this:
# 2022-03-08,123.6,2.63,0,10.3,0
# where the columns are:
# date,weight in pounds,miles walked,miles run,miles biked,miles swum
#
# Normal usage:
#   icont cltrainsum.icn -x <days.csv
# Usage for unit testing:
#   icont cltrainsum.icn -x -t
#
# Mark Riordan  2022-05-11

# A record that represents a date.
record CDate(ayear, amonth, aday)
# A record that represents the activities for one day.
record CWorkoutDay(date, weight, walk, run, bike, swim)
# A record that represents the running sums of activities for a year.
record CYearSummary(totweight, nweight, totwalk, totrun, totbike, totswim)

global tableYears

# Parse the incoming date into year, month, day
# Entry:    adate is of the form YYYY-MM-DD
# Exit:     Returns a CDate object with the year, month, day.
#           They are set to 0 if the parsing failed.
procedure parseDate(adate)
    year := 0
    month := 0
    day := 0
    adate ? { year := tab(many(&digits)) & tab(match("-")) & month := tab(many(&digits)) &
        tab(match("-")) & day := tab(many(&digits)) }
    return CDate(0+year, 0+month, 0+day)
end

# Concatenate two strings.
# Oddly, the // operator sometimes causes a failure (and does not return
# a result), so this is a workaround for using //.
procedure concat(str1, str2)
    result := str1
    result[*str1+1 : *str1+1] := str2
    return result
end

# Convert a number to a string with one decimal place.
# E.g. 65 is converted to 65.0; 65.762 is converted to 65.8.
procedure realtodecimal(myreal)
    # Convert to string, allowing for rounding to nearest tenth.
    strval := string(myreal + 0.05)
    result := "badresult" 
    if { strval ? {intpart := tab(many("-0123456789")) & match(".") & move(1) & decpart := move(1) } } then {
        result := concat(intpart, ".")
        result := concat(result, decpart)
    } else {
        result := concat(strval, ".0")
    }
    return result
end

# Parse an input line, and return a record containing its data.
# Entry:    line is a line in the format emitted by cltrainparse.icn.
#                See the comments at the top.
# Exit:     Returns a CWorkoutDay record with the data, or fails.
procedure parseline(line)
    notcomma := &ascii -- ','
    if line ? { 
        date := tab(many(notcomma)) & move(1) & 
        weight := tab(many(notcomma)) & move(1) &
        walk := tab(many(notcomma)) & move(1) &
        run := tab(many(notcomma)) & move(1) &
        bike := tab(many(notcomma)) & move(1) &
        swim := tab(many(notcomma))
      } then {
        #write("parseline: date=",date," weight=",weight," walk=",walk," run=",run," bike=",bike," swim=",swim)
        thisDate := parseDate(date)
        return CWorkoutDay(thisDate, weight, walk, run, bike, swim)
    } else {
        write("!! failed to parse: ", line)
    }
end

# Process an input line, adding it to the running sums.
# Entry:    line is a line in the format emitted by cltrainparse.icn.
procedure processline(line)
    if myWorkout := parseline(line) then {
        # Look up existing entry for this year
        yeardata := tableYears[myWorkout.date.ayear]
        if /yeardata then {
            # No existing record for this year, so create an empty one.
            yeardata := CYearSummary(0,0,0,0,0,0)
        }
        # Add in this line's data to the running sums.
        yeardata.totwalk := yeardata.totwalk + myWorkout.walk
        yeardata.totrun := yeardata.totrun + myWorkout.run
        yeardata.totbike := yeardata.totbike + myWorkout.bike
        yeardata.totswim := yeardata.totswim + myWorkout.swim
        if myWorkout.weight > 0 then {
            yeardata.totweight := yeardata.totweight + myWorkout.weight
            yeardata.nweight := yeardata.nweight + 1
        }
        # Record the updated year's sums.
        tableYears[myWorkout.date.ayear] := yeardata
    } else {
        write("!! processline could not parse ", line)
    }
end

# Process the entire input.
procedure readlines()
    tableYears := table()
    iline := 0

    while line := trim(read()) do {
        iline := iline + 1;
        if *line > 0 then {
            processline(line)
        }
    }
end

# Write summary output for all years, based on the table we have been
# maintaining while processing lines.
procedure displayresults()
    listYears := sort(tableYears,1)
    every iyear := 1 to *listYears do {
        yearinfo := listYears[iyear]
        year := yearinfo[1]
        yeardata := yearinfo[2]
        # Compute the average weight for the year, or 0 if there's no data.
        aveweight := 0
        if yeardata.nweight > 0 then {
            aveweight := yeardata.totweight / yeardata.nweight
        }
        write(year, ",", realtodecimal(aveweight), ",", realtodecimal(yeardata.totwalk), ",", 
            realtodecimal(yeardata.totrun), ",", 
            realtodecimal(yeardata.totbike), ",", 
            realtodecimal(yeardata.totswim))
    }
end

# Unit tests.
procedure test1()
    line := "2022-03-08,123.6,2.63,0,10.3,0"
    myWorkout := parseline(line)
    if myWorkout.weight = 123.6 & myWorkout.walk = 2.63 & myWorkout.run = 0 &
        myWorkout.bike = 10.3 & myWorkout.swim = 0 then {
        write("Parsed ", line, " OK")
    } else {
        write("!! Failed to parse ", line)
    }

    num := 65
    result := realtodecimal(num)
    if result == "65.0" then {
        write("Converted ", num, " to ", result, " OK")
    } else {
        write("!! Bad conversion of ", num,"; got ", result)
    }

    num := 65.672
    result := realtodecimal(num)
    if result == "65.7" then {
        write("Converted ", num, " to ", result, " OK")
    } else {
        write("!! Bad conversion of ", num,"; got ", result)
    }
end

procedure main(args)
    # Crack the command line arguments.
    test := &null
    i := 1
    while i <= *args do {
        if args[i] == "-t" then {
            test := 1
        }
        i:=i+1
    }

    if \test then {
        test1()
    } else {
        readlines()
        displayresults()
    }
end
